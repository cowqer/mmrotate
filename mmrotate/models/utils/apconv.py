import torch
import torch.nn as nn
import torch.nn.functional as F
import math
import einops
# --------------------------------------------------------
# get from https://github.com/rwightman/pytorch-image-models/blob/main/timm/models/layers/weight_init.py
# --------------------------------------------------------
import warnings

#：实现从截断正态分布中采样，并用采样值填充张量tensor。
def _trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    # Values are generated by using a truncated uniform distribution and
    # then using the inverse CDF for the normal distribution.
    # Get upper and lower cdf values
    l = norm_cdf((a - mean) / std)
    u = norm_cdf((b - mean) / std)

    # Uniformly fill tensor with values from [l, u], then translate to
    # [2l-1, 2u-1].
    tensor.uniform_(2 * l - 1, 2 * u - 1)

    # Use inverse cdf transform for normal distribution to get truncated
    # standard normal
    tensor.erfinv_()

    # Transform to proper mean, std
    tensor.mul_(std * math.sqrt(2.))
    tensor.add_(mean)

    # Clamp to ensure it's in the proper range
    tensor.clamp_(min=a, max=b)
    return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.
    NOTE: this impl is similar to the PyTorch trunc_normal_, the bounds [a, b] are
    applied while sampling the normal with mean/std applied, therefore a, b args
    should be adjusted to match the range of mean, std args.
    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    with torch.no_grad():
        return _trunc_normal_(tensor, mean, std, a, b)

class LayerNormProxy(nn.Module):
    # copy from https://github.com/LeapLabTHU/DAT/blob/main/models/dat_blocks.py
    def __init__(self, dim):
        super().__init__()
        self.norm = nn.LayerNorm(dim)

    def forward(self, x):
        x = einops.rearrange(x, 'b c h w -> b h w c')
        x = self.norm(x)
        return einops.rearrange(x, 'b h w c -> b c h w')

class h_sigmoid(nn.Module):
    def __init__(self, inplace=True):
        super(h_sigmoid, self).__init__()
        self.relu = nn.ReLU6(inplace=inplace)

    def forward(self, x):
        return self.relu(x + 3) / 6

class h_swish(nn.Module):
    def __init__(self, inplace=True):
        super(h_swish, self).__init__()
        self.sigmoid = h_sigmoid(inplace=inplace)

    def forward(self, x):
        return x * self.sigmoid(x)
    
    
class RountingFunctionPro(nn.Module):
    def __init__(self, in_channels, kernel_number=1):
        super().__init__()
        self.kernel_number = kernel_number
        self.dwc = nn.Conv2d(in_channels, in_channels, kernel_size=3, padding=1,
                             groups=in_channels, bias=False)
        self.norm = LayerNormProxy(in_channels)
        self.relu = nn.ReLU(inplace=True)

        self.avg_pool = nn.AdaptiveAvgPool2d((1, 1))
        
        # 新增的 fc 层，用于预测卷积核的宽高
        self.fc_width = nn.Linear(in_channels, kernel_number, bias=True)
        self.fc_height = nn.Linear(in_channels, kernel_number, bias=True)
        
        # init weights
        trunc_normal_(self.dwc.weight, std=.02)

        trunc_normal_(self.fc_width.weight, std=.02)
        trunc_normal_(self.fc_height.weight, std=.02)

    def forward(self, x):
        # 卷积 + 归一化 + 激活
        x = self.dwc(x)
        x = self.norm(x)
        x = self.relu(x)

        # 平均池化
        x = self.avg_pool(x).squeeze(dim=-1).squeeze(dim=-1)  # avg_x.shape = [batch_size, Cin]

        # 计算 alphas 和 angles

        # 计算卷积核的宽和高
        width = self.fc_width(x)  # [batch_size, kernel_number]
        height = self.fc_height(x)  # [batch_size, kernel_number]

        # 限制宽度和高度在 3 到 7 之间
        width = torch.clamp(width, min=3, max=7)
        height = torch.clamp(height, min=3, max=7)

        # 将输出转换为整数
        width = torch.round(width).long()  # 或者使用 torch.floor(width).long() 或 torch.ceil(width).long()
        height = torch.round(height).long()  # 同理
        width = width[0].item()  # 获取第一个批次的宽度并转换为标量
        height = height[0].item()  # 获取第一个批次的高度并转换为标量
        
        return  width, height
    
def autopad(k, p=None, d=1):  # kernel, padding, dilation
    """Pad to 'same' shape outputs."""
    if d > 1:
        k = d * (k - 1) + 1 if isinstance(k, int) else [d * (x - 1) + 1 for x in k]  # actual kernel-size
    if p is None:
        p = k // 2 if isinstance(k, int) else [x // 2 for x in k]  # auto-pad
    return p


class Conv(nn.Module):
    """Standard convolution with args(ch_in, ch_out, kernel, stride, padding, groups, dilation, activation)."""

    default_act = nn.SiLU()  # default activation

    def __init__(self, c1, c2, k=1, s=1, p=None, g=1, d=1, act=True):
        """Initialize Conv layer with given arguments including activation."""
        super().__init__()
        self.conv = nn.Conv2d(c1, c2, k, s, autopad(k, p, d), groups=g, dilation=d, bias=False)
        self.bn = nn.BatchNorm2d(c2)
        self.act = self.default_act if act is True else act if isinstance(act, nn.Module) else nn.Identity()

    def forward(self, x):
        """Apply convolution, batch normalization and activation to input tensor."""
        return self.act(self.bn(self.conv(x)))

    def forward_fuse(self, x):
        """Perform transposed convolution of 2D data."""
        return self.act(self.conv(x))




class APConv(nn.Module):
    ''' Pinwheel-shaped Convolution using the Asymmetric Padding method. '''
    
    def __init__(self, c1, c2, k1, k2, s, rounting=None):
        super().__init__()
        self.c1 = c1
        self.c2 = c2
        self.k1 = k1        
        self.k2 = k2
        self.s = s
        self.rounting = rounting
        
        # Convolutional layers for different parts
        self.cw = Conv(self.c1, self.c2 // 4, (1, self.k1), s=self.s, p=0)
        self.ch = Conv(self.c1, self.c2 // 4, (self.k2, 1), s=self.s, p=0)
        self.cat = Conv(self.c2, self.c2, 2, s=1, p=0)

    def get_pads(self, x):
        '''Calculate padding for different parts of the pinwheel convolution.'''
        self.k1, self.k2 = self.rounting(x)
        self.k1 = self.k1[0, 0].item()  # Getting the first batch element
        self.k2 = self.k2[0, 0].item()
        p = [(self.k1, 0, 1, 0), (0, self.k1, 0, 1), (0, 1, self.k2, 0), (1, 0, 0, self.k2)]
        pad = [nn.ZeroPad2d(padding=(pad_values)) for pad_values in p]
        return pad

    def forward(self, x):
        # Get the padding for each part of the pinwheel convolution
        pad = self.get_pads(x)
        
        # Apply padding and convolutions
        yw0 = self.cw(pad[0](x))
        yw1 = self.cw(pad[1](x))
        yh0 = self.ch(pad[2](x))
        yh1 = self.ch(pad[3](x))
        
        # Concatenate results and apply final convolution
        return self.cat(torch.cat([yw0, yw1, yh0, yh1], dim=1))
        

if __name__ == "__main__":
    # Create a random input tensor of shape (batch_size, channels, height, width)
    x = torch.randn(1, 3, 64, 64)  # 1 image, 3 channels, 64x64 size
    
    # Create an instance of PConv
    apconv = APConv(c1=3, c2=64, k1=3, k2=9, s=1, rounting = RountingFunctionPro(in_channels=3,kernel_number=1) )# output channels = 64
    
    # Forward pass
    output = apconv(x)
    
    # Print output shape
    print("Output shape:", output.shape)
